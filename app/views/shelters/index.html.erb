<h1 class="shelter-title">避難所一覧</h1>

<a href="<%= download_shelters_path %>" class="csv-download-link">
  CSVダウンロード　(更新日時: 2024年10月17日)
</a>

<!-- 注意書きを追加 -->
<p class="data-update-notice">
  データが更新された場合は、最新の情報をダウンロードしてください。
</p>

<!-- 検索フォームを追加 -->
<form id="shelter-search-form" class="search-form">
  <label for="search-region">都道府県 or 市区町村</label>
  <input type="text" id="search-region" name="region" placeholder="例: 東京都, 品川区, 東京都品川区">
  <button type="submit">検索</button>
  <p id="search-warning" class="search-warning">
    都道府県で検索すると、非常に多くの結果が表示されます。
  </p>
</form>


<div class="nearby-shelters">
  <button id="show-nearby-shelters" class="show-nearby-button">
    近くの避難所を表示
  </button>
  <span class="nearby-message">←クリックで近くの避難所を3件表示します。</span>
</div>

<!-- 検索結果を少し下に、右に配置 -->
<div id="shelter-list" class="shelter-list">
  <h2>検索結果の表示リスト</h2>
  <p id="result-message" class="result-message">※現在地から近い順に表示されます。クリックするとマップが表示されます。
    表示されない場合はページの更新をしてください。
  </p>
</div>

<!-- 地図を少し下に配置 -->
<div id="map" class="map"></div>

<!-- トップページに戻るリンク -->
<div>
  <%= link_to 'トップページに戻る', root_path, class: 'center-link' %>
</div>





<style>
  /* タイトルスタイル */
  .shelter-title {
    text-align: center;  /* 中央揃え */
    color: blue;  /* 青色 */
    text-decoration: underline;  /* 下線 */
  }

  /* CSVダウンロードリンクスタイル */
  .csv-download-link {
    font-size: 1.2em;  /* フォントサイズ */
    color: #007BFF;  /* リンク色 */
    text-decoration: none;  /* 下線なし */
    display: block;  /* ブロック表示 */
    text-align: center;  /* 中央揃え */
    margin: 10px 0;  /* 上下のマージン */
  }

  /* データ更新注意書きスタイル */
  .data-update-notice {
    text-align: center;  /* 中央揃え */
    color: red;  /* 赤色 */
    margin: 10px 0;  /* 上下のマージン */
  }

  /* 検索フォームスタイル */
  .search-form {
    max-width: 400px;  /* 最大幅400px */
    margin: 20px auto;  /* 上下のマージン、自動中央揃え */
    padding: 20px;  /* 内側のパディング */
    border: 1px solid #ccc;  /* ボーダー */
    border-radius: 5px;  /* 角を丸める */
    background-color: #f9f9f9;  /* 背景色 */
    line-height: 1.6;  /* 行間の調整 */
  }

  /* 検索ボタンスタイル */
  .search-form button {
    width: 30%;  /* 幅30% */
    background-color: green;  /* 緑色背景 */
    color: white;  /* 白文字 */
    padding: 10px;  /* 内側のパディング */
    border: none;  /* ボーダーなし */
    border-radius: 5px;  /* 角を丸める */
    cursor: pointer;  /* ポインタカーソル */
    display: block;  /* ブロック表示 */
    margin: 10px auto;  /* 上下のマージン、自動中央揃え */
  }

  /* 近くの避難所ボタンエリアスタイル */
  .nearby-shelters {
    text-align: center;  /* 中央揃え */
    margin-top: 50px;  /* 上のマージン */
  }

  /* 近くの避難所表示ボタンスタイル */
  .show-nearby-button {
    background-color: blue;  /* 青色背景 */
    color: white;  /* 白文字 */
    padding: 10px 20px;  /* 内側のパディング */
    border: none;  /* ボーダーなし */
    border-radius: 5px;  /* 角を丸める */
    cursor: pointer;  /* ポインタカーソル */
  }

  /* 近くの避難所メッセージスタイル */
  .nearby-message {
    margin-left: 10px;  /* 左のマージン */
    color: red;  /* 赤色 */
  }

  /* 検索結果リストスタイル */
  .shelter-list {
    margin-top: 30px;  /* 上のマージン */
    margin-left: 30px;
    margin-right: 30px;
  }

  /* 検索結果のメッセージスタイル */
  .result-message {
    color: red;  /* 赤色 */
  }

  /* 地図スタイル */
  .map {
    width: 100%;  /* 幅100% */
    height: 400px;  /* 高さ400px */
    margin-top: 50px;  /* 上のマージン */
  }

  .red-text {
    color: red; /* 赤色のテキスト */
  }
  .black-text {
    color: black; /* 黒色のテキスト */
  }

  .search-warning {
    color: red;
    font-size: 14px;
    margin-top: 25px; /* 上に少し余白を追加 */
  }
</style>



<script>
let map;
let marker;
let userLat, userLon;

// Google Maps APIが読み込まれた後に呼び出される
function initMap() {
  map = new google.maps.Map(document.getElementById('map'), {
    center: { lat: 35.6895, lng: 139.6917 }, // デフォルトで東京
    zoom: 12
  });

  // 位置情報の取得
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function(position) {
      userLat = position.coords.latitude;
      userLon = position.coords.longitude;
    });
  }

  // CSVデータの取得と処理
  const csvFilePath = "<%= download_shelters_path %>";

  fetch(csvFilePath)
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.text();
    })
    .then(data => {
      const shelters = parseCSV(data);

      // 「近くの避難所を表示」ボタンのクリックイベント
      document.getElementById('show-nearby-shelters').addEventListener('click', function () {
        if (userLat !== undefined && userLon !== undefined) {
          const sortedShelters = shelters.map(shelter => {
            const distance = haversineDistance(userLat, userLon, parseFloat(shelter['緯度']), parseFloat(shelter['経度']));
            return { ...shelter, distance };
          }).sort((a, b) => a.distance - b.distance).slice(0, 3); // 上位3件のみ表示

          displayShelters(sortedShelters, userLat, userLon);
        } else {
          alert('位置情報を取得できませんでした。');
        }
      });

      // 検索フォームの送信イベント
      document.getElementById('shelter-search-form').addEventListener('submit', function (event) {
        event.preventDefault();
        const searchRegion = document.getElementById('search-region').value.trim();
        
        if (searchRegion) {
          const filteredShelters = shelters
            .filter(shelter => 
              shelter['住所'] && shelter['施設・場所名'] && 
              (shelter['住所'].includes(searchRegion) || shelter['施設・場所名'].includes(searchRegion))
            )
            .map(shelter => {
              // 距離を計算して追加
              const distance = userLat !== undefined && userLon !== undefined ? 
                               haversineDistance(userLat, userLon, parseFloat(shelter['緯度']), parseFloat(shelter['経度'])) : 
                               Infinity;
              return { ...shelter, distance };
            })
            .sort((a, b) => a.distance - b.distance);  // 距離順にソート

          displayShelters(filteredShelters, userLat, userLon);
        } else {
          alert('検索フィールドを入力してください。');
        }
      });
    })
    .catch(error => {
      console.error('There was a problem with the fetch operation:', error);
    });
}

function parseCSV(data) {
  const lines = data.split('\n');
  const headers = lines[0].split(',');

  return lines.slice(1).map(line => {
    const values = line.split(',');
    const shelter = {};
    headers.forEach((header, index) => {
      shelter[header.trim()] = values[index] ? values[index].trim() : null;
    });
    return shelter;
  }).filter(shelter => shelter['緯度'] && shelter['経度']);  // 緯度・経度があるデータのみフィルタリング
}

function displayShelters(shelters, userLat, userLon) {
  const shelterList = document.getElementById('shelter-list');
  shelterList.innerHTML = ''; // 既存の内容をクリア

  // 検索結果の見出しを追加
  const header = document.createElement('h2');
  header.textContent = '検索結果の表示リスト';
  shelterList.appendChild(header);

  // 説明文を追加
  const description = document.createElement('p');
  description.textContent = '※現在地から近い順に表示されてます。クリックするとマップが表示されます。';
  description.classList.add('red-text'); // 赤色のクラスを追加
  shelterList.appendChild(description);

  const resultMessage = document.getElementById('result-message');
  if (shelters.length === 0) {
    const noResultsMessage = document.createElement('p');
    noResultsMessage.textContent = '該当する避難所が見つかりませんでした。';
    shelterList.appendChild(noResultsMessage);
    return;
  }

  shelters.forEach(shelter => {
    const shelterItem = document.createElement('div');
    const lat = parseFloat(shelter['緯度']);
    const lon = parseFloat(shelter['経度']);

    // ユーザーと避難所の距離を計算
    const distance = userLat !== undefined && userLon !== undefined ? 
                     haversineDistance(userLat, userLon, lat, lon).toFixed(2) : 
                     '距離情報なし';

    // 表示形式を変更
    shelterItem.textContent = `● 施設名：${shelter['施設・場所名']}　/　住所：${shelter['住所']} (距離: ${distance} km)`;

    shelterItem.addEventListener('click', function() {
      showShelterOnMap(lat, lon);
    });

    shelterList.appendChild(shelterItem);
  });
}

function showShelterOnMap(lat, lon) {
  if (!marker) {
    marker = new google.maps.Marker({
      position: { lat: lat, lng: lon },
      map: map
    });
  } else {
    marker.setPosition({ lat: lat, lng: lon });
  }

  map.setCenter({ lat: lat, lng: lon });
}

function haversineDistance(lat1, lon1, lat2, lon2) {
  const R = 6371; // 地球の半径（km）
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
            Math.sin(dLon / 2) * Math.sin(dLon / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
}
</script>

<!-- Google Maps APIのスクリプトを非同期で読み込む -->
<script async defer src="https://maps.googleapis.com/maps/api/js?key=YOUR_ACTUAL_API_KEY&callback=initMap"></script>